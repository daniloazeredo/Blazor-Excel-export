@page "/"
@using BlazorExcelExport.XLS
@inject HttpClient Http          
@inject IJSRuntime js

<PageTitle>Test de Julien</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>     

    <br />        
    <button type="button" class="btn btn-success mb-2" @onclick="@ClickExportXLS">Create XLSX</button>
	
    <br />

    <button type="button" class="btn btn-success mb-2" @onclick="@ClickTemplateXLS">Template XLSX</button>
	
    <br />

    <button type="button" class="btn btn-success mb-2" @onclick="@ClickApplyTemplateExistingFileXLS">Apply Template on a existing file XLSX</button>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private async void ClickExportXLS()
    {
        var xls = new Excel();
        await xls.GenerateWeatherForecastAsync(js, forecasts, "export.xlsx");
    }

    private async void ClickTemplateXLS()
    {
        Stream streamTemplate = await Http.GetStreamAsync("xls/template2.xlsx");

        var xls = new Excel();
        await xls.TemplateWeatherForecastAsync(js, streamTemplate, forecasts, "template.xlsx");
    }

	[Inject]
    public HttpClient _client { get; set; }
	
    private async void ClickApplyTemplateExistingFileXLS()
    {
        Stream streamTemplate = await Http.GetStreamAsync("xls/template.xlsx");

        var xls = new Excel();
        await xls.TemplateOnExistingFileAsync(_client, 
                                              js, 
                                              streamTemplate, 
                                              forecasts, 
                                              @"xls\Existing_File.xlsx");
    }
    
}